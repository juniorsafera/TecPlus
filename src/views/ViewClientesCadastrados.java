/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import dao.ConnectionFactory;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author IdeaSofist
 */
public class ViewClientesCadastrados extends javax.swing.JFrame {

    /**
     * Creates new form ViewClientesCadastrados
     */
    // Varáveis uteis
    String dataHoje = null;
    String mes = null;

    public ViewClientesCadastrados() {
        initComponents();
        pegarDataAtual();
        listarClientes();
        listarAniversarianteDoMes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bSair = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tPesquisar = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbClientes = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbClientesAniversariantes = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bSair.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSair.setOpaque(false);
        bSair.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bSairMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout bSairLayout = new javax.swing.GroupLayout(bSair);
        bSair.setLayout(bSairLayout);
        bSairLayout.setHorizontalGroup(
            bSairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        bSairLayout.setVerticalGroup(
            bSairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        getContentPane().add(bSair, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 500, 40, 50));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Clientes");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 30, -1, -1));

        tPesquisar.setBackground(new java.awt.Color(45, 45, 85));
        tPesquisar.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        tPesquisar.setForeground(new java.awt.Color(255, 255, 255));
        tPesquisar.setBorder(null);
        tPesquisar.setOpaque(false);
        tPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tPesquisarKeyReleased(evt);
            }
        });
        getContentPane().add(tPesquisar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 270, 25));

        tbClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbClientes);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(254, 254, 254)
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 995, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Clientes Cadastrados", jPanel2);

        tbClientesAniversariantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbClientesAniversariantes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbClientesAniversariantesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbClientesAniversariantes);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 995, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 995, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 362, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Aniversariantes do mês", jPanel1);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 1000, 390));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TelaClientesCadastrados.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bSairMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSairMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_bSairMouseClicked

    private void tPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tPesquisarKeyReleased
        // TODO add your handling code here:
        pesquisarCliente();
    }//GEN-LAST:event_tPesquisarKeyReleased

    private void tbClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbClientesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tbClientesMouseClicked

    private void tbClientesAniversariantesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbClientesAniversariantesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tbClientesAniversariantesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewClientesCadastrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewClientesCadastrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewClientesCadastrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewClientesCadastrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewClientesCadastrados().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bSair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField tPesquisar;
    private javax.swing.JTable tbClientes;
    private javax.swing.JTable tbClientesAniversariantes;
    // End of variables declaration//GEN-END:variables

// INÍCIO Método para listar Clientes na tabela
    private void listarClientes() {

        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String sql = "SELECT "
                + "idclientes ID, "
                + "nome Nome, "
                + "nascimento  Aniversário , "
                + "endereco Endereço, "
                + "bairro Bairro, "
                + "fone Fone ,"
                + "email Email "
                + "  FROM clientes ORDER BY nome ";
        try {
            stmt = con.prepareStatement(sql);
            rs = rs = stmt.executeQuery();

            tbClientes.setModel(DbUtils.resultSetToTableModel(rs));

            tbClientes.setDefaultEditor(Object.class, null);

            tbClientes.getColumnModel().getColumn(0).setPreferredWidth(5); // ID
            tbClientes.getColumnModel().getColumn(1).setPreferredWidth(80); // Nome
            tbClientes.getColumnModel().getColumn(2).setPreferredWidth(30); // Nascimento
            tbClientes.getColumnModel().getColumn(3).setPreferredWidth(100); // Endereço
            tbClientes.getColumnModel().getColumn(4).setPreferredWidth(50); // Bairro
            tbClientes.getColumnModel().getColumn(5).setPreferredWidth(70); // Fone
            tbClientes.getColumnModel().getColumn(6).setPreferredWidth(100); // Email

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            ConnectionFactory.closeConnection(con, stmt, rs);
        }
    }
    // FIM Método para listar Clientes na tabela

    //INÍCIO Método para pesquisar Cliente por Id ou Nome
    private void pesquisarCliente() {
        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String sql = "SELECT "
                + "idclientes ID, "
                + "nome Nome, "
                + "nascimento  Aniversário , "
                + "endereco Endereço, "
                + "bairro Bairro, "
                + "fone Fone ,"
                + "email Email "
                + " FROM clientes WHERE nome    LIKE ? OR idclientes LIKE ? ";

        try {

            stmt = con.prepareStatement(sql);
            stmt.setString(1, tPesquisar.getText() + "%");
            stmt.setString(2, tPesquisar.getText() + "%");
            rs = stmt.executeQuery();

            // Usar a biblioteca *rs2xml* para listar dados
            tbClientes.setModel(DbUtils.resultSetToTableModel(rs));

            tbClientes.getColumnModel().getColumn(0).setPreferredWidth(5); // ID
            tbClientes.getColumnModel().getColumn(1).setPreferredWidth(80); // Nome
            tbClientes.getColumnModel().getColumn(2).setPreferredWidth(30); // Nascimento
            tbClientes.getColumnModel().getColumn(3).setPreferredWidth(100); // Endereço
            tbClientes.getColumnModel().getColumn(4).setPreferredWidth(50); // Bairro
            tbClientes.getColumnModel().getColumn(5).setPreferredWidth(70); // Fone
            tbClientes.getColumnModel().getColumn(6).setPreferredWidth(100); // Email

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            ConnectionFactory.closeConnection(con, stmt);
        }
    }
    //FIM Método para pesquisar Cliente por Id ou Nome

    //INÍCIO Método para pegar a data atual do sistema
    private void pegarDataAtual() {

        Date data = new Date(System.currentTimeMillis());
        SimpleDateFormat formatarDate = new SimpleDateFormat("yyyy-MM-dd");
        dataHoje = formatarDate.format(data);
        converterMes();
        System.out.println(mes);

    }
    //FIM Método para pegar a data atual do sistema

    // INÍCIO Método para pegar o mês atual e converter em escrito
    private void converterMes() {
        if (dataHoje.substring(5, 7).equals("01")) {
            mes = "Janeiro";
        }
        if (dataHoje.substring(5, 7).equals("02")) {
            mes = "Fevereiro";
        }
        if (dataHoje.substring(5, 7).equals("03")) {
            mes = "Março";
        }
        if (dataHoje.substring(5, 7).equals("04")) {
            mes = "Abril";
        }
        if (dataHoje.substring(5, 7).equals("05")) {
            mes = "Maio";
        }
        if (dataHoje.substring(5, 7).equals("06")) {
            mes = "Junho";
        }
        if (dataHoje.substring(5, 7).equals("07")) {
            mes = "Julho";
        }
        if (dataHoje.substring(5, 7).equals("08")) {
            mes = "Agosto";
        }
        if (dataHoje.substring(5, 7).equals("09")) {
            mes = "Setembro";
        }
        if (dataHoje.substring(5, 7).equals("10")) {
            mes = "Outubro";
        }
        if (dataHoje.substring(5, 7).equals("11")) {
            mes = "Novembro";
        }
        if (dataHoje.substring(5, 7).equals("12")) {
            mes = "Dezembro";
        }
    }
    // FIM Método para pegar o mês atual e converter em escrito

    // INÍCIO Método para listar apenas o aniversariante do mês
    private void listarAniversarianteDoMes() {
        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String sql = "SELECT "
                + "idclientes ID, "
                + "nome Nome, "
                + "nascimento  Aniversário , "
                + "endereco Endereço, "
                + "bairro Bairro, "
                + "fone Fone ,"
                + "email Email "
                + "  FROM clientes WHERE nascimento LIKE ? ORDER BY nascimento";
        try {
            stmt = con.prepareStatement(sql);
            stmt.setString(1, "% " + mes + "%");

            rs = stmt.executeQuery();

            tbClientesAniversariantes.setModel(DbUtils.resultSetToTableModel(rs));

            tbClientesAniversariantes.setDefaultEditor(Object.class, null);

            tbClientesAniversariantes.getColumnModel().getColumn(0).setPreferredWidth(5); // ID
            tbClientesAniversariantes.getColumnModel().getColumn(1).setPreferredWidth(80); // Nome
            tbClientesAniversariantes.getColumnModel().getColumn(2).setPreferredWidth(60); // Nascimento
            tbClientesAniversariantes.getColumnModel().getColumn(3).setPreferredWidth(100); // Endereço
            tbClientesAniversariantes.getColumnModel().getColumn(4).setPreferredWidth(50); // Bairro
            tbClientesAniversariantes.getColumnModel().getColumn(5).setPreferredWidth(70); // Fone
            tbClientesAniversariantes.getColumnModel().getColumn(6).setPreferredWidth(100); // Email

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            ConnectionFactory.closeConnection(con, stmt, rs);
        }
    }
    // FIM Método para listar apenas o aniversariante do mês

}
