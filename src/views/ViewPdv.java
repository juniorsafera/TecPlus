/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import dao.ConnectionFactory;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author IdeaSofist
 */
public class ViewPdv extends javax.swing.JFrame {

    /**
     * Creates new form ViewPdv
     */
    
    
    /**
     * Variáveis uteis
     */
    String codigo_produto = null;
    int estoque_produto;
    int quantidade_produto = 0;
    Double valor_produto = 0.0;
    String formaPagamento = null;

    String dataHoje = null;

    String carrinho = null;
    StringBuilder cCodigoProduto = new StringBuilder();
    StringBuilder cProdutos = new StringBuilder();
    StringBuilder cQuantidade = new StringBuilder();
    StringBuilder cValorUnit = new StringBuilder();
    StringBuilder cValorTotal = new StringBuilder();

    int tEstoque;

    DecimalFormat formatarDouble = new DecimalFormat("0.00");
    
    
    public ViewPdv() {
        initComponents();
       
        setaricon();
        setDefaultCloseOperation(0); // limpar comando ao fechar Frame

        pegarDataAtual();
        listarProdutos();
        listarCarrinho();
        totalCarrinho();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        bCancelar = new javax.swing.JPanel();
        rDinheiro = new javax.swing.JRadioButton();
        rCartao = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbCarrinho = new javax.swing.JTable();
        tTotalCarrinho = new javax.swing.JTextField();
        tTotalPagar = new javax.swing.JTextField();
        cbProdutos = new javax.swing.JComboBox<>();
        bAdicionar = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        tQuantidade = new javax.swing.JSpinner();
        bFinalizarVenda = new javax.swing.JPanel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bCancelar.setOpaque(false);
        bCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bCancelarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout bCancelarLayout = new javax.swing.GroupLayout(bCancelar);
        bCancelar.setLayout(bCancelarLayout);
        bCancelarLayout.setHorizontalGroup(
            bCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 145, Short.MAX_VALUE)
        );
        bCancelarLayout.setVerticalGroup(
            bCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );

        getContentPane().add(bCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 508, 145, 32));

        buttonGroup1.add(rDinheiro);
        rDinheiro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rDinheiroMouseClicked(evt);
            }
        });
        rDinheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rDinheiroActionPerformed(evt);
            }
        });
        getContentPane().add(rDinheiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 460, -1, -1));

        buttonGroup1.add(rCartao);
        rCartao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rCartaoMouseClicked(evt);
            }
        });
        rCartao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rCartaoActionPerformed(evt);
            }
        });
        getContentPane().add(rCartao, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 460, -1, -1));

        tbCarrinho.setForeground(new java.awt.Color(47, 47, 73));
        tbCarrinho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Produto", "Quantidade", "Valor_Unit", "Valor R$"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbCarrinho.setGridColor(new java.awt.Color(47, 47, 73));
        tbCarrinho.setOpaque(false);
        tbCarrinho.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbCarrinhoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbCarrinho);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 980, 180));

        tTotalCarrinho.setBackground(new java.awt.Color(240, 240, 240));
        tTotalCarrinho.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        tTotalCarrinho.setForeground(new java.awt.Color(47, 47, 73));
        tTotalCarrinho.setText("00,00");
        tTotalCarrinho.setBorder(null);
        tTotalCarrinho.setOpaque(false);
        getContentPane().add(tTotalCarrinho, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 359, 90, 30));

        tTotalPagar.setBackground(new java.awt.Color(67, 67, 90));
        tTotalPagar.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tTotalPagar.setForeground(new java.awt.Color(255, 255, 255));
        tTotalPagar.setText("00,00");
        tTotalPagar.setBorder(null);
        tTotalPagar.setOpaque(false);
        getContentPane().add(tTotalPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 455, 150, -1));

        cbProdutos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Selecione--" }));
        cbProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProdutosActionPerformed(evt);
            }
        });
        getContentPane().add(cbProdutos, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 45, 420, -1));

        bAdicionar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bAdicionar.setOpaque(false);
        bAdicionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bAdicionarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout bAdicionarLayout = new javax.swing.GroupLayout(bAdicionar);
        bAdicionar.setLayout(bAdicionarLayout);
        bAdicionarLayout.setHorizontalGroup(
            bAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 230, Short.MAX_VALUE)
        );
        bAdicionarLayout.setVerticalGroup(
            bAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        getContentPane().add(bAdicionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 230, 30));

        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel1.setOpaque(false);
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 360, -1, 25));

        tQuantidade.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(tQuantidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 44, 60, -1));

        bFinalizarVenda.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bFinalizarVenda.setOpaque(false);
        bFinalizarVenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bFinalizarVendaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout bFinalizarVendaLayout = new javax.swing.GroupLayout(bFinalizarVenda);
        bFinalizarVenda.setLayout(bFinalizarVendaLayout);
        bFinalizarVendaLayout.setHorizontalGroup(
            bFinalizarVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        bFinalizarVendaLayout.setVerticalGroup(
            bFinalizarVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 31, Short.MAX_VALUE)
        );

        getContentPane().add(bFinalizarVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 508, 140, 31));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TelaPdv.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bCancelarMouseClicked
        // TODO add your handling code here:
         int tabela;
        tabela = tbCarrinho.getRowCount();

        if (tabela > 0) {
            JOptionPane.showMessageDialog(this, "Finalize a venda ou Delete os produtos do carrinho para sair!", "Atençao!", JOptionPane.WARNING_MESSAGE);
        } else {
            this.dispose();
        }

    }//GEN-LAST:event_bCancelarMouseClicked

    private void tbCarrinhoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbCarrinhoMouseClicked
        // TODO add your handling code here:
        // totalCarrinho();
        setar_campos();
    }//GEN-LAST:event_tbCarrinhoMouseClicked

    private void bAdicionarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bAdicionarMouseClicked
        // TODO add your handling code here:
        if (codigo_produto == null) {
            JOptionPane.showMessageDialog(this, "Selecione um Produto!");
        } else if (tQuantidade.getValue().equals(0)) {
            JOptionPane.showMessageDialog(this, "Selecione a quantidade do Produto!");
        } else if (Integer.parseInt(tQuantidade.getValue().toString()) > estoque_produto) {

            JOptionPane.showMessageDialog(this, "Temos apenas " + estoque_produto + " " + cbProdutos.getSelectedItem().toString() + " em estoque ");

        } else {
            // adicionarNoCarrinho();
            salvarCarrinhonoBanco();
            totalCarrinho();

        }
    }//GEN-LAST:event_bAdicionarMouseClicked

    private void cbProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProdutosActionPerformed
        // TODO add your handling code here:
        extrairDadosProdutos();
    }//GEN-LAST:event_cbProdutosActionPerformed

    private void rDinheiroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rDinheiroMouseClicked
        // TODO add your handling code here:
        formaPagamento = "Dinheiro";

    }//GEN-LAST:event_rDinheiroMouseClicked

    private void rDinheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rDinheiroActionPerformed
        // TODO add your handling code here:
        formaPagamento = "Dinheiro";

    }//GEN-LAST:event_rDinheiroActionPerformed

    private void rCartaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rCartaoActionPerformed
        // TODO add your handling code here:
         formaPagamento = "Cartão";
    }//GEN-LAST:event_rCartaoActionPerformed

    private void rCartaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rCartaoMouseClicked
        // TODO add your handling code here:
         formaPagamento = "Cartão";
    }//GEN-LAST:event_rCartaoMouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        excluirProdutoCarrinho();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void bFinalizarVendaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bFinalizarVendaMouseClicked
        // TODO add your handling code here:
         int tabela;
        tabela = tbCarrinho.getRowCount();
        if( tabela <= 0){
            JOptionPane.showMessageDialog(null,
                    "Adicione produtos no carrinho!", "Atençao!", JOptionPane.WARNING_MESSAGE);
        } else
        if (formaPagamento == null) {
            JOptionPane.showMessageDialog(null,
                    "Informe a forma de pagamento!", "Atençao!", JOptionPane.WARNING_MESSAGE);
        } else {
            salvarVenda();
        }
    }//GEN-LAST:event_bFinalizarVendaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPdv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPdv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPdv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPdv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewPdv().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bAdicionar;
    private javax.swing.JPanel bCancelar;
    private javax.swing.JPanel bFinalizarVenda;
    private javax.swing.JLabel background;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbProdutos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton rCartao;
    private javax.swing.JRadioButton rDinheiro;
    private javax.swing.JSpinner tQuantidade;
    private javax.swing.JTextField tTotalCarrinho;
    private javax.swing.JTextField tTotalPagar;
    private javax.swing.JTable tbCarrinho;
    // End of variables declaration//GEN-END:variables


    /*
    *
    * ÁREA PARA TODOS OS MÉTODOS
    *
     */
    
    
    
    // INÍCIO Método para setar icon do jFrame
    private void setaricon() {

        //  ImageIcon frameIcon = new ImageIcon("icon.png");
        //this.setIconImage(frameIcon.getImage());
        URL url = this.getClass().getResource("icon.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
    }
    // FIM Método para setar icon do jFrame

    
    
    
    
    // INÍCIO Método para listar produtos na tabela
    private void listarProdutos() {

        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM produtos ORDER BY produto ASC";
            stmt = con.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                String servico = rs.getString("produto");

                cbProdutos.addItem(servico);

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        } finally {
            ConnectionFactory.closeConnection(con, stmt, rs);
        }

    }
    // FIM Método para listar produtos na tabela

    // INÍCIO Método para zerar dados para adicionar novo produto no carrinho
    private void limparDadosProdutos() {
        cbProdutos.setSelectedItem("--Selecione--");
        tQuantidade.setValue(0);
    }
    // FIM Método para zerar dados para adicionar novo produto no carrinho

    //INÍCIO Método para extrair dados do Produto pelo cbProdutos
    private void extrairDadosProdutos() {

        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String sql = "SELECT * FROM produtos WHERE produto=? ";
        try {
            stmt = con.prepareStatement(sql);
            //  pst.setString(1, txtUsuId.getText());
            //  pst.setString(1, v);
            stmt.setString(1, cbProdutos.getSelectedItem().toString());
            rs = stmt.executeQuery();

            if (rs.next()) {

                codigo_produto = rs.getString(1);
                estoque_produto = Integer.parseInt(rs.getString(3));
                valor_produto = Double.parseDouble(rs.getString(4).replace(",", "."));

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        } finally {
            ConnectionFactory.closeConnection(con, stmt, rs);
        }
    }
    //FIM Método para extrair dados do Produto pelo cbProdutos

    // INÍCIO Método para calcular total a pagar
    public void totalCarrinho() {

        // int setar = tbCarrinho.getSelectedRow();
        //tTotalCarrinho.setText(formatarDouble.format(calculo) );
        Double soma = 0.00;
        Double valor;

        int count = tbCarrinho.getRowCount();

        for (int i = 0; i < count; i++) {
            valor = Double.parseDouble(tbCarrinho.getValueAt(i, 4).toString().replace(",", "."));
            soma = soma + valor;
        }

        tTotalCarrinho.setText(String.valueOf(formatarDouble.format(soma)).replace(".", ","));
        tTotalPagar.setText(String.valueOf(formatarDouble.format(soma)).replace(".", ","));
    }
    // FIM Método para calcular total a pagar

    // INÍCIO Método para salvar carrinho no banco temporariamente
    private void salvarCarrinhonoBanco() {

        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        int quantidade_selecionado = Integer.parseInt(tQuantidade.getValue().toString());
        double t = quantidade_selecionado * valor_produto;

        String sql = "INSERT  INTO carrinho "
                + "( codigo_produto, "
                + "produto,   "
                + "quantidade, "
                + "valor , valor_total ) "
                + " VALUES (?,?,?,?,?)";
        try {
            stmt = con.prepareStatement(sql);

            stmt.setString(1, codigo_produto);
            stmt.setString(2, cbProdutos.getSelectedItem().toString());
            stmt.setString(3, tQuantidade.getValue().toString());
            stmt.setString(4, formatarDouble.format(valor_produto));
            stmt.setString(5, formatarDouble.format(quantidade_selecionado * valor_produto));

            // A linha abaixo atualiza os dados     
            int adicionado = stmt.executeUpdate();

            if (adicionado > 0) {
                tEstoque = estoque_produto - Integer.parseInt(tQuantidade.getValue().toString());
                tQuantidade.setValue(0);
                atualizarEstoque();
                listarCarrinho();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Falha ao adicionar no carrinho! " + "\n" + e);
        } finally {
            ConnectionFactory.closeConnection(con, stmt, rs);
        }
    }
    // FIM Método para salvar carrinho no banco temporariamente

    // INÍCIO Método para atualizar o carrinho 
    private void listarCarrinho() {
        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String sql = "SELECT codigo_produto Código, "
                + "produto Produto, "
                + "quantidade Quantidade  , "
                + "valor Valor_Unit  , "
                + "valor_total TOTAL_R$ "
                + "from carrinho ";
        try {
            stmt = con.prepareStatement(sql);
            rs = rs = stmt.executeQuery();

            tbCarrinho.setModel(DbUtils.resultSetToTableModel(rs));

            tbCarrinho.setDefaultEditor(Object.class, null);

            tbCarrinho.getColumnModel().getColumn(0).setPreferredWidth(5);
            tbCarrinho.getColumnModel().getColumn(1).setPreferredWidth(340);
            tbCarrinho.getColumnModel().getColumn(2).setPreferredWidth(30);
            tbCarrinho.getColumnModel().getColumn(3).setPreferredWidth(30);
            tbCarrinho.getColumnModel().getColumn(4).setPreferredWidth(30);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            ConnectionFactory.closeConnection(con, stmt, rs);
        }
    }
    // FIM Método para atualizar o carrinho 

    //INÍCIO Método para limpar carrinho 
    private void limparCarrinho() {

        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String sql = "DELETE FROM carrinho ";
        try {
            stmt = con.prepareStatement(sql);

            stmt.executeUpdate();

        } catch (Exception e) {

        } finally {
            ConnectionFactory.closeConnection(con, stmt);
        }
    }
    //FIM Método para limpar carrinho 

    //INÍCIO Método para Excluír Produto do carrinho
    private void excluirProdutoCarrinho() {

        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String sql = "DELETE FROM carrinho where codigo_produto =?";
        try {
            stmt = con.prepareStatement(sql);
            stmt.setString(1, codigo_produto);
            int apagado = stmt.executeUpdate();
            if (apagado > 0) {

                tEstoque = (estoque_produto + quantidade_produto);

                atualizarEstoque();
                listarCarrinho();
                totalCarrinho();
            }
        } catch (java.sql.SQLIntegrityConstraintViolationException e) {
            JOptionPane.showMessageDialog(null, "Erro ao excluir produto do carrinho!");
        } catch (Exception ee) {
            JOptionPane.showMessageDialog(null, ee);
            System.out.println(ee);
        } finally {
            ConnectionFactory.closeConnection(con, stmt);
        }
    }

    //FIM Método para Excluír Produto do carrinho
    //INÍCIO Método para pegar a data atual do sistema
    private void pegarDataAtual() {

        Date data = new Date(System.currentTimeMillis());
        SimpleDateFormat formatarDate = new SimpleDateFormat("yyyy-MM-dd");
        dataHoje = formatarDate.format(data);

    }
    //FIM Método para pegar a data atual do sistema

    // Início Método para salvar uma Venda no banco de dados
    private void salvarVenda() {

        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        int count = tbCarrinho.getRowCount();

        for (int i = 0; i < count; i++) {
            carrinho = ((String) tbCarrinho.getValueAt(i, 0) + "\n");
            cCodigoProduto.append(carrinho);
            // c = carrinho + carrinho;

        }

        for (int i = 0; i < count; i++) {
            carrinho = ((String) tbCarrinho.getValueAt(i, 1) + "\n");
            cProdutos.append(carrinho);
            // c = carrinho + carrinho;

        }

        for (int i = 0; i < count; i++) {
            carrinho = ((String) tbCarrinho.getValueAt(i, 2) + "\n");
            cQuantidade.append(carrinho);
            // c = carrinho + carrinho;

        }

        for (int i = 0; i < count; i++) {
            carrinho = ((String) tbCarrinho.getValueAt(i, 3) + "\n");
            cValorUnit.append(carrinho);
            // c = carrinho + carrinho;

        }

        for (int i = 0; i < count; i++) {
            carrinho = ((String) tbCarrinho.getValueAt(i, 4) + "\n");
            cValorTotal.append(carrinho);
            // c = carrinho + carrinho;

        }

        int quantidade_selecionado = Integer.parseInt(tQuantidade.getValue().toString());
        double t = quantidade_selecionado * valor_produto;

        String sql = "INSERT  INTO vendas "
                + "( codigo_produto, "
                + " produto, "
                + "quantidade,   "
                + "valor_unit, "
                + "valor_total, "
                + "total_pago , "
                + "forma_pagamento , "
                + " data_venda) "
                + " VALUES (?,?,?,?,?,?,?,?)";
        try {
            stmt = con.prepareStatement(sql);

            stmt.setString(1, cCodigoProduto.toString());
            stmt.setString(2, cProdutos.toString());
            stmt.setString(3, cQuantidade.toString());
            stmt.setString(4, cValorUnit.toString());
            stmt.setString(5, cValorTotal.toString());
            stmt.setString(6, tTotalPagar.getText().replace(",", "."));
            stmt.setString(7, formaPagamento);
            stmt.setString(8, dataHoje);

            // A linha abaixo atualiza os dados     
            int adicionado = stmt.executeUpdate();
            if (adicionado > 0) {
                JOptionPane.showMessageDialog(null, "Venda finalizada com sucesso!");
                limparCarrinho();
                registrarEntradaCaixa();
                listarCarrinho();
                imprimir_ao_registrar_Venda();
                cbProdutos.setSelectedItem("--Selecione--");
                formaPagamento = null;
                tTotalCarrinho.setText(null);
                tTotalPagar.setText(null);
                formaPagamento = null;

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Falha ao finalizar venda! " + "\n" + e);
        } finally {
            ConnectionFactory.closeConnection(con, stmt);
        }
    }
    // Fim Método para salvar uma Venda no banco de dados

    // INÍCIO Método para imprimir venda registrada
    private void imprimir_ao_registrar_Venda() {

        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        final ViewLoading carregando = new ViewLoading();

        carregando.setVisible(true);

        Thread t = new Thread() {

            public void run() {

                try {
                    // Usando a classe JasperPrint para preparar a impressão
                    JasperPrint print = JasperFillManager.fillReport("src/util/imprimir_ao_registrar_venda.jasper", null, con);
                    carregando.dispose();
                    JasperViewer.viewReport(print, false);

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                    carregando.dispose();
                } finally {
                    ConnectionFactory.closeConnection(con, stmt);
                }
            }
        };

        t.start();
    }
    // FIM Método para imprimir venda registrada

    // INÍCIO Método para atualizar estoque
    private void atualizarEstoque() {

        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String sql = "UPDATE produtos SET "
                + "estoque =? WHERE codigo_produto =? ";
        try {
            stmt = con.prepareStatement(sql);
            stmt.setString(1, String.valueOf(tEstoque));

            stmt.setString(2, codigo_produto);

            // A linha abaixo atualiza os dados     
            int adicionado = stmt.executeUpdate();
            if (adicionado > 0) {

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            ConnectionFactory.closeConnection(con, stmt);
        }
    }
    // FIM Método para atualizar estoque

    // INÍCIO Método para setar dados do produto
    public void setar_campos() {

        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        int setar = tbCarrinho.getSelectedRow();
        codigo_produto = tbCarrinho.getModel().getValueAt(setar, 0).toString();
        quantidade_produto = Integer.parseInt(tbCarrinho.getModel().getValueAt(setar, 2).toString());

        String sql = "SELECT * FROM produtos WHERE codigo_produto=? ";
        try {
            stmt = con.prepareStatement(sql);
            //  pst.setString(1, txtUsuId.getText());
            //  pst.setString(1, v);
            stmt.setString(1, codigo_produto);
            rs = stmt.executeQuery();

            if (rs.next()) {

                estoque_produto = Integer.parseInt(rs.getString(3));

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        } finally {
            ConnectionFactory.closeConnection(con, stmt, rs);
        }
    }

    // FIM Método para setar dados do produto
    
    
    
    
     // INÍCIO Método para registrar o movimento do caixa ao realizar Venda
    private void registrarEntradaCaixa() {

        java.sql.Connection con = ConnectionFactory.getConnection();
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String sql = "INSERT  INTO caixa "
                + "( descricao, "
                + "  valor , "
                + "tipo_movimento , "
                + "tipo_pagamento , "
                + "data_movimento)  "
                + " VALUES (?,?,?,?,?)";
        try {
            stmt = con.prepareStatement(sql);

            stmt.setString(1, "Venda de Produtos  ");
            stmt.setString(2,  tTotalPagar.getText().replace(",", "."));
            stmt.setString(3, "Entrada");
            stmt.setString(4, formaPagamento);
            stmt.setString(5, dataHoje);

            // A linha abaixo valida os campos obgtorios
            int adicionado = stmt.executeUpdate();
            if (adicionado > 0) {

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            ConnectionFactory.closeConnection(con, stmt);
        }
    }
    // FIM Método para registrar o movimento do caixa ao realizar Venda
    
     

}
